<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Avalonia.Win32</name>
    </assembly>
    <members>
        <member name="M:Avalonia.Win32.DirectX.DxgiRenderTarget.BeginDrawCore">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Win32.Input.Imm32InputMethod">
            <summary>
            A Windows input method editor based on Windows Input Method Manager (IMM32).
            </summary>
        </member>
        <member name="T:Avalonia.Win32.Input.KeyInterop">
            <summary>
            Contains methods used to translate a Windows virtual/physical key to an Avalonia <see cref="T:Avalonia.Input.Key"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Win32.Input.KeyInterop.IsExtended(System.Int32)">
            <summary>
            Indicates whether the key is an extended key, such as the right-hand ALT and CTRL keys.
            According to https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-keydown.
            </summary>
        </member>
        <member name="M:Avalonia.Win32.Input.KeyInterop.KeyFromVirtualKey(System.Int32,System.Int32)">
            <summary>
            Gets an Avalonia key from a Windows virtual-key and key data.
            </summary>
            <param name="virtualKey">The Windows virtual-key.</param>
            <param name="keyData">The key data (in the same format as lParam for WM_KEYDOWN).</param>
            <returns>An Avalonia key, or <see cref="F:Avalonia.Input.Key.None"/> if none matched.</returns>
        </member>
        <member name="M:Avalonia.Win32.Input.KeyInterop.VirtualKeyFromKey(Avalonia.Input.Key)">
            <summary>
            Gets a Windows virtual-key from an Avalonia key.
            </summary>
            <param name="key">The Avalonia key.</param>
            <returns>A Windows virtual-key code, or 0 if none matched.</returns>
        </member>
        <member name="M:Avalonia.Win32.Input.KeyInterop.PhysicalKeyFromVirtualKey(System.Int32,System.Int32)">
            <summary>
            Gets a physical Avalonia key from a Windows virtual-key and key data.
            </summary>
            <param name="virtualKey">The Windows virtual-key.</param>
            <param name="keyData">The key data (in the same format as lParam for WM_KEYDOWN).</param>
            <returns>An Avalonia physical key, or <see cref="F:Avalonia.Input.PhysicalKey.None"/> if none matched.</returns>
        </member>
        <member name="M:Avalonia.Win32.Input.KeyInterop.GetKeySymbol(System.Int32,System.Int32)">
            <summary>
            Gets a key symbol from a Windows virtual-key and key data.
            </summary>
            <param name="virtualKey">The Windows virtual-key.</param>
            <param name="keyData">The key data (in the same format as lParam for WM_KEYDOWN).</param>
            <returns>A key symbol, or null if none matched.</returns>
        </member>
        <member name="M:Avalonia.Win32.Interop.TaskBarList.MarkFullscreen(System.IntPtr,System.Boolean)">
            <summary>
            Ported from https://github.com/chromium/chromium/blob/master/ui/views/win/fullscreen_handler.cc
            </summary>
            <param name="hwnd">The window handle.</param>
            <param name="fullscreen">Fullscreen state.</param>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.Hide">
            <summary>
            Hides the window and activates another window.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.Normal">
            <summary>
            Activates and displays a window. If the window is minimized, maximized, or arranged, the system restores it to its original 
            size and position. An application should specify this flag when displaying the window for the first time.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.ShowMinimized">
            <summary>
            Activates the window and displays it as a minimized window.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.Maximize">
            <summary>
            Activates the window and displays it as a maximized window.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.ShowMaximized">
            <inheritdoc cref="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.Maximize"/>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.ShowNoActivate">
            <summary>
            Displays a window in its most recent size and position. This value is similar to <see cref="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.Normal"/>, except that the window is not activated.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.Show">
            <summary>
            Activates the window and displays it in its current size and position.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.Minimize">
            <summary>
            Minimizes the specified window and activates the next top-level window in the Z order.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.ShowMinNoActive">
            <summary>
            Displays the window as a minimized window. This value is similar to <see cref="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.ShowMinimized"/>, except the window is not activated.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.ShowNA">
            <summary>
            Displays the window in its current size and position. This value is similar to <see cref="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.Show"/>, except that the window is not activated.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.Restore">
            <summary>
            Activates and displays the window. If the window is minimized, maximized, or arranged, the system restores it to its original size and position. 
            An application should specify this flag when restoring a minimized window.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.ShowDefault">
            <summary>
            Sets the show state based on the <see cref="T:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand"/> value specified in the STARTUPINFO structure passed to the CreateProcess function 
            by the program that started the application.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.ForceMinimize">
            <summary>
            Minimizes a window, even if the thread that owns the window is not responding. This flag should only be used when minimizing windows from a different thread.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.GCS.GCS_COMPATTR">
            <summary>Retrieve or update the attribute of the composition string.</summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.GCS.GCS_COMPCLAUSE">
            <summary>Retrieve or update clause information of the composition string.</summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.GCS.GCS_COMPREADATTR">
            <summary>Retrieve or update the attributes of the reading string of the current composition.</summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.GCS.GCS_COMPREADCLAUSE">
            <summary>Retrieve or update the clause information of the reading string of the composition string.</summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.GCS.GCS_COMPREADSTR">
            <summary>Retrieve or update the reading string of the current composition.</summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.GCS.GCS_COMPSTR">
            <summary>Retrieve or update the current composition string.</summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.GCS.GCS_CURSORPOS">
            <summary>Retrieve or update the cursor position in composition string.</summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.GCS.GCS_DELTASTART">
            <summary>Retrieve or update the starting position of any changes in composition string.</summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.GCS.GCS_RESULTCLAUSE">
            <summary>Retrieve or update clause information of the result string.</summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.GCS.GCS_RESULTREADCLAUSE">
            <summary>Retrieve or update clause information of the reading string.</summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.GCS.GCS_RESULTREADSTR">
            <summary>Retrieve or update the reading string.</summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.GCS.GCS_RESULTSTR">
            <summary>Retrieve or update the string of the composition result.</summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ClipboardFormat.CF_TEXT">
            <summary>
            Text format. Each line ends with a carriage return/linefeed (CR-LF) combination. A null character signals the end of the data. Use this format for ANSI text.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ClipboardFormat.CF_BITMAP">
            <summary>
            A handle to a bitmap
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ClipboardFormat.CF_DIB">
            <summary>
            A memory object containing a BITMAPINFO structure followed by the bitmap bits.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ClipboardFormat.CF_UNICODETEXT">
            <summary>
            Unicode text format. Each line ends with a carriage return/linefeed (CR-LF) combination. A null character signals the end of the data.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ClipboardFormat.CF_HDROP">
            <summary>
            A handle to type HDROP that identifies a list of files. 
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.WINDOWPLACEMENT.Length">
            <summary>
            The length of the structure, in bytes. Before calling the GetWindowPlacement or SetWindowPlacement functions, set this member to sizeof(WINDOWPLACEMENT).
            <para>
            GetWindowPlacement and SetWindowPlacement fail if this member is not set correctly.
            </para>
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.WINDOWPLACEMENT.Flags">
            <summary>
            Specifies flags that control the position of the minimized window and the method by which the window is restored.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.WINDOWPLACEMENT.ShowCmd">
            <summary>
            The current show state of the window.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.WINDOWPLACEMENT.MinPosition">
            <summary>
            The coordinates of the window's upper-left corner when the window is minimized.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.WINDOWPLACEMENT.MaxPosition">
            <summary>
            The coordinates of the window's upper-left corner when the window is maximized.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.WINDOWPLACEMENT.NormalPosition">
            <summary>
            The window's coordinates when the window is in the restored position.
            </summary>
        </member>
        <member name="P:Avalonia.Win32.Interop.UnmanagedMethods.WINDOWPLACEMENT.Default">
            <summary>
            Gets the default (empty) value.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.TouchInputFlags.TOUCHEVENTF_MOVE">
            <summary>
            Movement has occurred. Cannot be combined with TOUCHEVENTF_DOWN.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.TouchInputFlags.TOUCHEVENTF_DOWN">
            <summary>
            The corresponding touch point was established through a new contact. Cannot be combined with TOUCHEVENTF_MOVE or TOUCHEVENTF_UP.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.TouchInputFlags.TOUCHEVENTF_UP">
            <summary>
            A touch point was removed.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.TouchInputFlags.TOUCHEVENTF_INRANGE">
            <summary>
            A touch point is in range. This flag is used to enable touch hover support on compatible hardware. Applications that do not want support for hover can ignore this flag.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.TouchInputFlags.TOUCHEVENTF_PRIMARY">
            <summary>
            Indicates that this TOUCHINPUT structure corresponds to a primary contact point. See the following text for more information on primary touch points.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.TouchInputFlags.TOUCHEVENTF_NOCOALESCE">
            <summary>
            When received using GetTouchInputInfo, this input was not coalesced.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.TouchInputFlags.TOUCHEVENTF_PALM">
            <summary>
            The touch event came from the user's palm.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.Icons.ICON_SMALL2">
            <summary>The small icon, but with the system theme variant rather than the window's own theme. Requested by other processes, e.g. the taskbar and Task Manager.</summary>
        </member>
        <member name="T:Avalonia.Win32.OpenGl.WglGdiResourceManager">
             <summary>
             - ReleaseDC can only happen from the same thread that has called GetDC
             - When thread exits all of its windows and HDCs are getting destroyed
             - We need to create OpenGL context (require a window and an HDC) and render targets (require an HDC) from thread pool threads
            
             So this class hosts a dedicated thread for managing offscreen windows and HDCs for OpenGL
             </summary>
        </member>
        <member name="F:Avalonia.Win32.PlatformConstants.Windows10_1607">
            <summary>
            Windows 10 Anniversary Update
            </summary>
        </member>
        <member name="P:Avalonia.Win32.ScreenImpl.ScreenCount">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Win32.ScreenImpl.AllScreens">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Win32.ScreenImpl.ScreenFromWindow(Avalonia.Platform.IWindowBaseImpl)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Win32.ScreenImpl.ScreenFromPoint(Avalonia.PixelPoint)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Win32.ScreenImpl.ScreenFromRect(Avalonia.PixelRect)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Win32.TrayIconImpl.SetIcon(Avalonia.Platform.IWindowIconImpl)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Win32.TrayIconImpl.SetIsVisible(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Win32.TrayIconImpl.SetToolTipText(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Win32.TrayIconImpl.CustomWindowsMessage">
            <summary>
            Custom Win32 window messages for the NotifyIcon
            </summary>
        </member>
        <member name="P:Avalonia.Win32.Win32Platform.WindowsVersion">
            <summary>
            Gets the actual WindowsVersion. Same as the info returned from RtlGetVersion.
            </summary>
        </member>
        <member name="T:Avalonia.Win32.WindowImpl">
            <summary>
            Window implementation for Win32 platform.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.WindowImpl.StandardDpi">
            <summary>
            The Windows DPI which equates to a <see cref="P:Avalonia.Win32.WindowImpl.RenderScaling"/> of 1.0.
            </summary>
        </member>
        <member name="M:Avalonia.Win32.WindowImpl.SetTransparencyMica">
            <summary>
            Sets the transparency mica
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Avalonia.Win32.WindowImpl.SetFullScreen(System.Boolean)">
            <summary>
            Ported from https://github.com/chromium/chromium/blob/master/ui/views/win/fullscreen_handler.cc
            Method must only be called from inside UpdateWindowProperties.
            </summary>
            <param name="fullscreen"></param>
        </member>
        <member name="M:Avalonia.Win32.WindowImpl.SetExtendClientAreaTitleBarHeightHint(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Win32.WindowImpl.GetWindowsZOrder(System.Span{Avalonia.Controls.Window},System.Span{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Win32.WindowImpl.IsClientAreaExtendedToDecorations">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Win32.WindowImpl.ExtendClientAreaToDecorationsChanged">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Win32.WindowImpl.NeedsManagedDecorations">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Win32.WindowImpl.ExtendedMargins">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Win32.WindowImpl.OffScreenMargin">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Win32.WindowImpl.AcrylicCompensationLevels">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Win32.WindowImpl.WindowStylesCallback">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Win32.WindowImpl.WndProcHookCallback">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Win32.WinRT.WinRTApiInformation">
            <summary>
            Any WinRT API might not be available even if Windows version is supposed to support them (Win PE, Xbox...).
            Using ApiInformation is a typical solution in UWP/WinUI apps, so we should do as well.
            </summary>
        </member>
        <member name="M:Avalonia.Win32.WinScreen.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Win32.WinScreen.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Win32RenderingMode">
            <summary>
            Represents the rendering mode for platform graphics.
            </summary>
        </member>
        <member name="F:Avalonia.Win32RenderingMode.Software">
            <summary>
            Avalonia is rendered into a framebuffer.
            </summary>
        </member>
        <member name="F:Avalonia.Win32RenderingMode.AngleEgl">
            <summary>
            Enables ANGLE EGL for Windows with GPU rendering.
            </summary>
        </member>
        <member name="F:Avalonia.Win32RenderingMode.Wgl">
            <summary>
            Avalonia would try to use native Widows OpenGL with GPU rendering.
            </summary>
        </member>
        <member name="F:Avalonia.Win32RenderingMode.Vulkan">
            <summary>
            Avalonia would try to use native Widows Vulkan with GPU rendering.
            </summary>
        </member>
        <member name="T:Avalonia.Win32DpiAwareness">
            <summary>
            Represents the DPI Awareness for the application.
            </summary>
        </member>
        <member name="F:Avalonia.Win32DpiAwareness.Unaware">
            <summary>
            The application is DPI unaware.
            </summary>
        </member>
        <member name="F:Avalonia.Win32DpiAwareness.SystemDpiAware">
            <summary>
            The application is system DPI aware. It will query DPI once and will not adjust to new DPI changes
            </summary>
        </member>
        <member name="F:Avalonia.Win32DpiAwareness.PerMonitorDpiAware">
            <summary>
            The application is per-monitor DPI aware. It adjust its scale factor whenever DPI changes.
            </summary>
        </member>
        <member name="T:Avalonia.Win32CompositionMode">
            <summary>
            Represents the Win32 window composition mode.
            </summary>
        </member>
        <member name="F:Avalonia.Win32CompositionMode.WinUIComposition">
            <summary>
            Render Avalonia to a texture inside the Windows.UI.Composition tree.
            </summary>
            <remarks>
            Supported on Windows 10 build 17134 and above. Ignored on other versions.
            This is recommended option, as it allows window acrylic effects and high refresh rate rendering.<br/>
            Can only be applied with <see cref="P:Avalonia.Win32PlatformOptions.RenderingMode"/>=<see cref="F:Avalonia.Win32RenderingMode.AngleEgl"/>.
            </remarks>
        </member>
        <member name="F:Avalonia.Win32CompositionMode.DirectComposition">
            <summary>
            Render Avalonia to a texture inside the DirectComposition tree.
            </summary>
            <remarks>
            Supported on Windows 8 and above. Ignored on other versions.<br/>
            Can only be applied with <see cref="P:Avalonia.Win32PlatformOptions.RenderingMode"/>=<see cref="F:Avalonia.Win32RenderingMode.AngleEgl"/>.
            </remarks>
        </member>
        <member name="F:Avalonia.Win32CompositionMode.LowLatencyDxgiSwapChain">
            <summary>
            When <see cref="F:Avalonia.Win32CompositionMode.LowLatencyDxgiSwapChain"/> is active, renders Avalonia through a low-latency Dxgi Swapchain.
            </summary>
            <remarks>
            Requires Feature Level 11_3 to be active, Windows 8.1+ Any Subversion. 
            This is only recommended if low input latency is desirable, and there is no need for the transparency
            and styling / blurring offered by <see cref="F:Avalonia.Win32CompositionMode.WinUIComposition"/>.<br/>
            Can only be applied with <see cref="P:Avalonia.Win32PlatformOptions.RenderingMode"/>=<see cref="F:Avalonia.Win32RenderingMode.AngleEgl"/>.
            </remarks>
        </member>
        <member name="F:Avalonia.Win32CompositionMode.RedirectionSurface">
            <summary>
            The window renders to a redirection surface.
            </summary>
            <remarks>
            This option is kept only for compatibility with older systems. Some Avalonia features might not work.
            </remarks>
        </member>
        <member name="T:Avalonia.Win32PlatformOptions">
            <summary>
            Platform-specific options which apply to Windows.
            </summary>
        </member>
        <member name="P:Avalonia.Win32PlatformOptions.OverlayPopups">
            <summary>
            Embeds popups to the window when set to true. The default value is false.
            </summary>
        </member>
        <member name="P:Avalonia.Win32PlatformOptions.RenderingMode">
            <summary>
            Gets or sets Avalonia rendering modes with fallbacks.
            The first element in the array has the highest priority.
            The default value is: <see cref="F:Avalonia.Win32RenderingMode.AngleEgl"/>, <see cref="F:Avalonia.Win32RenderingMode.Software"/>.
            </summary>
            <remarks>
            If application should work on as wide range of devices as possible, at least add <see cref="F:Avalonia.Win32RenderingMode.Software"/> as a fallback value.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if no values were matched.</exception>
        </member>
        <member name="P:Avalonia.Win32PlatformOptions.CompositionMode">
            <summary>
            Gets or sets Avalonia composition modes with fallbacks.
            The first element in the array has the highest priority.
            The default value is: <see cref="F:Avalonia.Win32CompositionMode.WinUIComposition"/>, <see cref="F:Avalonia.Win32CompositionMode.DirectComposition"/>, <see cref="F:Avalonia.Win32CompositionMode.RedirectionSurface"/>.
            </summary>
            <remarks>
            If application should work on as wide range of devices as possible, at least add <see cref="F:Avalonia.Win32CompositionMode.RedirectionSurface"/> as a fallback value.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if no values were matched.</exception>
        </member>
        <member name="P:Avalonia.Win32PlatformOptions.WinUICompositionBackdropCornerRadius">
            <summary>
            When <see cref="P:Avalonia.Win32PlatformOptions.CompositionMode"/> is set to <see cref="F:Avalonia.Win32CompositionMode.WinUIComposition"/>, create rounded corner blur brushes
            If set to null the brushes will be created using default settings (sharp corners)
            This can be useful when you need a rounded-corner blurred Windows 10 app, or borderless Windows 11 app.
            </summary>
        </member>
        <member name="P:Avalonia.Win32PlatformOptions.ShouldRenderOnUIThread">
            <summary>
            Render directly on the UI thread instead of using a dedicated render thread.
            Only applicable if <see cref="P:Avalonia.Win32PlatformOptions.CompositionMode"/> is set to <see cref="F:Avalonia.Win32CompositionMode.RedirectionSurface"/>.
            This setting is only recommended for interop with systems that must render on the UI thread, such as WPF.
            This setting is false by default.
            </summary>
        </member>
        <member name="P:Avalonia.Win32PlatformOptions.WglProfiles">
            <summary>
            Windows OpenGL profiles used when <see cref="P:Avalonia.Win32PlatformOptions.RenderingMode"/> is set to <see cref="F:Avalonia.Win32RenderingMode.Wgl"/>.
            This setting is 4.0 and 3.2 by default.
            </summary>
        </member>
        <member name="P:Avalonia.Win32PlatformOptions.CustomPlatformGraphics">
            <summary>
            Provides a way to use a custom-implemented graphics context such as a custom ISkiaGpu.
            When this property set <see cref="P:Avalonia.Win32PlatformOptions.RenderingMode"/> is ignored
            and <see cref="P:Avalonia.Win32PlatformOptions.CompositionMode"/> only accepts null or <see cref="F:Avalonia.Win32CompositionMode.RedirectionSurface"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Win32PlatformOptions.DpiAwareness">
            <summary>
            Gets or sets the application's DPI awareness.
            </summary>
        </member>
    </members>
</doc>
